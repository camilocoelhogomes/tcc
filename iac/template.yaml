AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Resources:
  LambdaPaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-payment-function
      Handler: index.lambda_handler
      Runtime: nodejs22.x
      CodeUri: ../lambda-payment-function/dist
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ENV: production
          BuildTimestamp: !Ref BuildTimestamp
      AutoPublishAlias: live
      DeploymentPreference:
        Enabled: true
        Type: AllAtOnce
    DependsOn: EventBus

  BenefitsRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EventBus
      Name: benefits-rule
      EventPattern:
        detail-type:
          - payment
      Targets:
        - Id: BenefitsQueueTarget
          Arn: !GetAtt BenefitsQueue.Arn

  BenefitsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: benefits-queue

  BenefitsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref BenefitsQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt BenefitsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt EventBus.Arn

  BenefitsRuleQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref BenefitsQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt BenefitsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt BenefitsRule.Arn
    DependsOn:
      - BenefitsQueue
      - BenefitsRule

  LambdaBenefitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-benefits-function
      Handler: index.lambda_handler
      Runtime: nodejs22.x
      CodeUri: ../lambda-benefits-function/dist
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ENV: production
          BuildTimestamp: !Ref BuildTimestamp
      Events:
        BenefitsQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BenefitsQueue.Arn
            MaximumBatchingWindowInSeconds: 3

  OverdueRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EventBus
      Name: overdue-rule
      EventPattern:
        detail-type:
          - payment
      Targets:
        - Id: OverdueQueueTarget
          Arn: !GetAtt OverdueQueue.Arn

  OverdueQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: overdue-queue

  OverdueQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref OverdueQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt OverdueQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt EventBus.Arn
    DependsOn:
      - OverdueQueue
      - OverdueRule

  OverdueRuleQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref OverdueQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt OverdueQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt OverdueRule.Arn
    DependsOn:
      - OverdueQueue
      - OverdueRule

  LambdaOverdueFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-overdue-function
      Handler: index.lambda_handler
      Runtime: nodejs22.x
      CodeUri: ../lambda-benefits-function/dist
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ENV: production
          BuildTimestamp: !Ref BuildTimestamp
      Events:
        OverdueQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OverdueQueue.Arn
            MaximumBatchingWindowInSeconds: 3
    DependsOn:
      - OverdueQueue
      - OverdueRule

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPaymentPolicy
          PolicyDocument:
            Fn::Transform:
              Name: AWS::Include
              Parameters:
                Location: ../permissions/lambda-payment-permissions.json
        - PolicyName: LambdaBenefitsPolicy
          PolicyDocument:
            Fn::Transform:
              Name: AWS::Include
              Parameters:
                Location: ../permissions/lambda-benefits-permissions.json
        - PolicyName: LambdaOverduePolicy
          PolicyDocument:
            Fn::Transform:
              Name: AWS::Include
              Parameters:
                Location: ../permissions/lambda-overdue-permissions.json

  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: tcc-event-bus

  PaymentApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: PaymentApi
      StageName: prod
      EndpointConfiguration:
        Type: REGIONAL
      Cors:
        AllowMethods: "'*'" # Specify valid HTTP methods
        AllowHeaders: "'*'" # Specify valid headers
        AllowOrigin: "'*'" # Allow all origins
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "Payment API"
          version: "1.0"
        paths:
          /payment:
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                    - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
                    - Region: !Ref "AWS::Region"
                      LambdaArn: !GetAtt LambdaPaymentFunction.Arn
                httpMethod: POST
                type: aws_proxy

  LambdaPaymentFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaPaymentFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PaymentApi}/*/POST/payment"

Parameters:
  BuildTimestamp:
    Type: String
    Description: Timestamp to force Lambda update
