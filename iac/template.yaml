AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Resources:
  PaymentQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: payment-queue

  PaymentQueuePolicy:
    DependsOn:
      - PaymentQueue
      - PaymentApi
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PaymentQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt PaymentQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt EventBus.Arn

  ApiGatewayToSQSRole:
    DependsOn:
      - PaymentQueue
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: ApiGatewayToSQSRole
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: sqs:SendMessage
                Effect: Allow
                Resource: !GetAtt "PaymentQueue.Arn"
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Effect: Allow
                Resource: "*"

  LambdaPaymentFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - PaymentQueue
    Properties:
      FunctionName: lambda-payment-function
      Handler: index.lambda_handler
      Runtime: nodejs22.x
      CodeUri: ../lambda-payment-function/dist
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ENV: production
          BuildTimestamp: !Ref BuildTimestamp
      AutoPublishAlias: live
      DeploymentPreference:
        Enabled: true
        Type: AllAtOnce
      Events:
        PaymentQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PaymentQueue.Arn
            MaximumBatchingWindowInSeconds: 3

  BenefitsRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EventBus
      Name: benefits-rule
      EventPattern:
        detail-type:
          - payment
      Targets:
        - Id: BenefitsQueueTarget
          Arn: !GetAtt BenefitsQueue.Arn

  BenefitsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: benefits-queue

  BenefitsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref BenefitsQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt BenefitsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt EventBus.Arn

  BenefitsRuleQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref BenefitsQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt BenefitsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt BenefitsRule.Arn
    DependsOn:
      - BenefitsQueue
      - BenefitsRule

  LambdaBenefitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-benefits-function
      Handler: index.lambda_handler
      Runtime: nodejs22.x
      CodeUri: ../lambda-benefits-function/dist
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ENV: production
          BuildTimestamp: !Ref BuildTimestamp
      Events:
        BenefitsQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BenefitsQueue.Arn
            MaximumBatchingWindowInSeconds: 3

  OverdueRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EventBus
      Name: overdue-rule
      EventPattern:
        detail-type:
          - payment
      Targets:
        - Id: OverdueQueueTarget
          Arn: !GetAtt OverdueQueue.Arn
    DependsOn:
      - EventBus
      - OverdueQueue

  OverdueQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: overdue-queue

  OverdueQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref OverdueQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt OverdueQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt OverdueRule.Arn
    DependsOn:
      - OverdueQueue
      - OverdueRule

  OverdueRuleQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref OverdueQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt OverdueQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt OverdueRule.Arn
    DependsOn:
      - OverdueQueue
      - OverdueRule

  LambdaOverdueFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-overdue-function
      Handler: index.lambda_handler
      Runtime: nodejs22.x
      CodeUri: ../lambda-benefits-function/dist
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ENV: production
          BuildTimestamp: !Ref BuildTimestamp
      Events:
        OverdueQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OverdueQueue.Arn
            MaximumBatchingWindowInSeconds: 3
    DependsOn:
      - OverdueQueue
      - OverdueRule

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPaymentPolicy
          PolicyDocument:
            Fn::Transform:
              Name: AWS::Include
              Parameters:
                Location: ../permissions/lambda-payment-permissions.json
        - PolicyName: LambdaBenefitsPolicy
          PolicyDocument:
            Fn::Transform:
              Name: AWS::Include
              Parameters:
                Location: ../permissions/lambda-benefits-permissions.json
        - PolicyName: LambdaOverduePolicy
          PolicyDocument:
            Fn::Transform:
              Name: AWS::Include
              Parameters:
                Location: ../permissions/lambda-overdue-permissions.json

  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: tcc-event-bus

  PaymentApi:
    Type: AWS::Serverless::Api
    DependsOn:
      - ApiGatewayToSQSRole
      - PaymentQueue
    Properties:
      Name: PaymentApi
      StageName: prod
      EndpointConfiguration:
        Type: REGIONAL
      Cors:
        AllowMethods: "'*'" # Specify valid HTTP methods
        AllowHeaders: "'*'" # Specify valid headers
        AllowOrigin: "'*'" # Allow all origins
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          ThrottlingBurstLimit: 600
          ThrottlingRateLimit: 600
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "Payment API"
          version: "1.0"
        paths:
          /payment:
            post:
              responses:
                "200":
                  description: Event post successfully handled and placed on queue
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiGatewayToSQSRole.Arn
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/payment-queue"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: "Action=SendMessage&MessageBody=$input.body"
                passthroughBehavior: "never"
                type: "aws"

Parameters:
  BuildTimestamp:
    Type: String
    Description: Timestamp to force Lambda update
